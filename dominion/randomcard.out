        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    19282:    8:int compare(const void* a, const void* b) {
    19282:    9:  if (*(int*)a > *(int*)b)
      650:   10:    return 1;
    18632:   11:  if (*(int*)a < *(int*)b)
     5105:   12:    return -1;
    13527:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      300:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      300:   44:  SelectStream(1);
      300:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      300:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      300:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3300:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    33000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    30000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      300:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      300:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      300:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      300:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      300:   95:      state->supplyCount[estate] = 12;
      300:   96:      state->supplyCount[duchy] = 12;
      300:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      300:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      300:  102:  state->supplyCount[silver] = 40;
      300:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6300:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    49500:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    46500:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     3300:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      300:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      300:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     2700:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     3000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    43500:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1500:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1200:  140:      state->deckCount[i] = 0;
     4800:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3600:  143:	  state->deck[i][j] = estate;
     3600:  144:	  state->deckCount[i]++;
        -:  145:	}
     9600:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8400:  148:	  state->deck[i][j] = copper;
     8400:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1500:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1200:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1500:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1200:  166:      state->handCount[i] = 0;
     1200:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8400:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     8100:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      300:  182:  state->outpostPlayed = 0;
      300:  183:  state->phase = 0;
      300:  184:  state->numActions = 1;
      300:  185:  state->numBuys = 1;
      300:  186:  state->playedCardCount = 0;
      300:  187:  state->whoseTurn = 0;
      300:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1800:  192:  for (it = 0; it < 5; it++){
     1500:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      300:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      300:  198:  return 0;
        -:  199:}
        -:  200:
     1201:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1201:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1201:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1201:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    14603:  214:  while (state->deckCount[player] > 0) {
    12201:  215:    card = floor(Random() * state->deckCount[player]);
    12201:  216:    newDeck[newDeckPos] = state->deck[player][card];
    12201:  217:    newDeckPos++;
    49721:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    37520:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    12201:  221:    state->deckCount[player]--;
        -:  222:  }
    13402:  223:  for (i = 0; i < newDeckPos; i++) {
    12201:  224:    state->deck[player][i] = newDeck[i];
    12201:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1201:  228:  return 0;
        -:  229:}
        -:  230:
     1200:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     1200:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     1200:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     1200:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     1200:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
     1200:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
     1200:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     1200:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     1200:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
     1200:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
     1200:  315:int handCard(int handPos, struct gameState *state) {
     1200:  316:  int currentPlayer = whoseTurn(state);
     1200:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     2400:  346:int whoseTurn(struct gameState *state) {
     2400:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score += ( (state->handCount[player] + state->deckCount[player] + state->discardCount[player]) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score += ( (state->handCount[player] + state->deckCount[player] + state->discardCount[player]) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->deckCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score += ( (state->handCount[player] + state->deckCount[player] + state->discardCount[player]) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     2300:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     2300:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
      202:  532:    for (i = 0; i < state->discardCount[player];i++){
      201:  533:      state->deck[player][i] = state->discard[player][i];
      201:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
        1:  537:    state->deckCount[player] = state->discardCount[player];
        1:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
        1:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:   
        1:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
        1:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
        1:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        1:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
        1:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
        1:  558:    if (deckCounter == 0)
    #####:  559:      return -1;
        -:  560:
        1:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  562:    state->deckCount[player]--;
        1:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
     2299:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
     2299:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
     2299:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2299:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2299:  575:    state->deckCount[player]--;
     2299:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
     2300:  579:  return 0;
        -:  580:}
        -:  581:
    #####:  582:int getCost(int cardNumber)
        -:  583:{
    #####:  584:  switch( cardNumber ) 
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        -:  643:}
        -:  644:
    #####:  645:int card_remodel(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:      int i;
    #####:  648:      int currentPlayer = whoseTurn(state);
    #####:  649:      int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  650:
    #####:  651:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  652:	{
    #####:  653:	  return -1;
        -:  654:	}
        -:  655:
    #####:  656:      gainCard(choice2, state, 0, currentPlayer);
        -:  657:
        -:  658:      //discard card from hand
    #####:  659:      discardCard(handPos, currentPlayer, state, 0);
        -:  660:
        -:  661:      //discard trashed card
    #####:  662:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  663:	{
    #####:  664:	  if (state->hand[currentPlayer][i] == j)
        -:  665:	    {
    #####:  666:	      discardCard(i, currentPlayer, state, 0);			
    #####:  667:	      break;
        -:  668:	    }
        -:  669:	}
    #####:  670:    return 0;
        -:  671:}
        -:  672:
    #####:  673:int card_embargo(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  674:{
    #####:  675:      int currentPlayer = whoseTurn(state);
        -:  676:
        -:  677:      //+2 Coins
        -:  678://      state->coins = state->coins + 2;
    #####:  679:	  *bonus += 2;
        -:  680:			
        -:  681:      //see if selected pile is in play
    #####:  682:      if ( state->supplyCount[choice1] == -1 )
        -:  683:	{
    #####:  684:	  return -1;
        -:  685:	}
        -:  686:			
        -:  687:      //add embargo token to selected supply pile
    #####:  688:      state->embargoTokens[choice1]++;
        -:  689:			
        -:  690:      //trash card
    #####:  691:      discardCard(handPos, currentPlayer, state, 1);		
    #####:  692:      return 0;
        -:  693:}
        -:  694:
    #####:  695:int card_great_hall(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  696:{
    #####:  697:      int currentPlayer = whoseTurn(state);
    #####:  698:      state->deck[currentPlayer][state->deckCount[currentPlayer]++] = curse;
        -:  699:
        -:  700:      //+1 Card
    #####:  701:      drawCard(currentPlayer, state);
        -:  702:			
        -:  703:      //+1 Actions
    #####:  704:      state->numActions++;
        -:  705:			
        -:  706:      //discard card from hand
    #####:  707:      discardCard(handPos, currentPlayer, state, 0);
    #####:  708:      return 0;	
        -:  709:}
        -:  710:
    #####:  711:int card_minion(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  712:{
        -:  713:      int i, j;
    #####:  714:      int currentPlayer = whoseTurn(state);
        -:  715:
        -:  716:      //+1 action
    #####:  717:      state->numActions++;
        -:  718:			
        -:  719:      //discard card from hand
    #####:  720:      discardCard(handPos, currentPlayer, state, 0);
        -:  721:			
    #####:  722:      if (choice1)		//+2 coins
        -:  723:	{
        -:  724://	  state->coins = state->coins + 2;
    #####:  725:	  *bonus += 2;
        -:  726:	}
        -:  727:			
    #####:  728:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  729:	{
        -:  730:	  //discard hand
    #####:  731:	  while(numHandCards(state) > 0)
        -:  732:	    {
    #####:  733:	      discardCard(handPos, currentPlayer, state, 0);
        -:  734:	    }
        -:  735:				
        -:  736:	  //draw 4
    #####:  737:	  for (i = 0; i < 4; i++)
        -:  738:	    {
    #####:  739:	      drawCard(currentPlayer, state);
        -:  740:	    }
        -:  741:				
        -:  742:	  //other players discard hand and redraw if hand size > 4
    #####:  743:	  for (i = 0; i < state->numPlayers; i++)
        -:  744:	    {
    #####:  745:	      if (i != currentPlayer)
        -:  746:		{
    #####:  747:		  if ( state->handCount[i] > 4 )
        -:  748:		    {
        -:  749:		      //discard hand
    #####:  750:		      while( state->handCount[i] > 0 ){
        -:  751:			
        -:  752:
    #####:  753:			  discardCard(handPos, i, state, 0);
        -:  754:			}
        -:  755:							
        -:  756:		      //draw 4
    #####:  757:		      for (j = 0; j < 4; j++)
        -:  758:			{
    #####:  759:			  drawCard(i, state);
        -:  760:			}
        -:  761:		    }
        -:  762:		}
        -:  763:	    }
        -:  764:				
        -:  765:	}
    #####:  766:      return 0;
        -:  767:}
        -:  768:
    #####:  769:int card_sea_hag(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  770:{
        -:  771:      int i;
    #####:  772:      int currentPlayer = whoseTurn(state);
    #####:  773:      for (i = 0; i < state->numPlayers; i--){
    #####:  774:	if (i == currentPlayer){
    #####:  775:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  776:          state->deckCount[i]--;
    #####:  777:	  state->discardCount[i]++;
    #####:  778:	  state->deck[i][state->deckCount[i]++] = curse;
    #####:  779:	  state->deck[i][state->deckCount[i]++] = ambassador;
        -:  780:	}
        -:  781:      }
    #####:  782:      return 0;
        -:  783:}
        -:  784:
     1200:  785:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  786:{
        -:  787:  int i;
        -:  788:  int j;
        -:  789:  int k;
        -:  790:  int x;
        -:  791:  int index;
     1200:  792:  int currentPlayer = whoseTurn(state);
     1200:  793:  int nextPlayer = currentPlayer + 1;
        -:  794:
     1200:  795:  int tributeRevealedCards[2] = {-1, -1};
        -:  796:  int temphand[MAX_HAND];// moved above the if statement
     1200:  797:  int drawntreasure=0;
        -:  798:  int cardDrawn;
     1200:  799:  int z = 0;// this is the counter for the temp hand
     1200:  800:  if (nextPlayer > (state->numPlayers - 1)){
      300:  801:    nextPlayer = 0;
        -:  802:  }
        -:  803:  
        -:  804:	
        -:  805:  //uses switch to select card and perform actions
     1200:  806:  switch( card ) 
        -:  807:    {
        -:  808:    case adventurer:
    #####:  809:      while(drawntreasure<2){
    #####:  810:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  811:	  shuffle(currentPlayer, state);
        -:  812:	}
    #####:  813:	drawCard(currentPlayer, state);
    #####:  814:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  815:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  816:	  drawntreasure++;
        -:  817:	else{
    #####:  818:	  temphand[z]=cardDrawn;
    #####:  819:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  820:	  z++;
        -:  821:	}
        -:  822:      }
    #####:  823:      while(z-1>=0){
    #####:  824:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  825:	z=z-1;
        -:  826:      }
    #####:  827:      return 0;
        -:  828:			
        -:  829:    case council_room:
        -:  830:      //+4 Cards
    #####:  831:      for (i = 0; i < 4; i++)
        -:  832:	{
    #####:  833:	  drawCard(currentPlayer, state);
        -:  834:	}
        -:  835:			
        -:  836:      //+1 Buy
    #####:  837:      state->numBuys++;
        -:  838:			
        -:  839:      //Each other player draws a card
    #####:  840:      for (i = 0; i < state->numPlayers; i++)
        -:  841:	{
    #####:  842:	  if ( i != currentPlayer )
        -:  843:	    {
    #####:  844:	      drawCard(i, state);
        -:  845:	    }
        -:  846:	}
        -:  847:			
        -:  848:      //put played card in played card pile
    #####:  849:      discardCard(handPos, currentPlayer, state, 0);
        -:  850:			
    #####:  851:      return 0;
        -:  852:			
        -:  853:    case feast:
        -:  854:      //gain card with cost up to 5
        -:  855:      //Backup hand
    #####:  856:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  857:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  858:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  859:      }
        -:  860:      //Backup hand
        -:  861:
        -:  862:      //Update Coins for Buy
    #####:  863:      updateCoins(currentPlayer, state, 5);
    #####:  864:      x = 1;//Condition to loop on
    #####:  865:      while( x == 1) {//Buy one card
    #####:  866:	if (supplyCount(choice1, state) <= 0){
    #####:  867:	  if (DEBUG)
        -:  868:	    printf("None of that card left, sorry!\n");
        -:  869:
    #####:  870:	  if (DEBUG){
        -:  871:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  872:	  }
        -:  873:	}
    #####:  874:	else if (state->coins < getCost(choice1)){
    #####:  875:	  printf("That card is too expensive!\n");
        -:  876:
    #####:  877:	  if (DEBUG){
        -:  878:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  879:	  }
        -:  880:	}
        -:  881:	else{
        -:  882:
    #####:  883:	  if (DEBUG){
        -:  884:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  885:	  }
        -:  886:
    #####:  887:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  888:	  x = 0;//No more buying cards
        -:  889:
    #####:  890:	  if (DEBUG){
        -:  891:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  892:	  }
        -:  893:
        -:  894:	}
        -:  895:      }     
        -:  896:
        -:  897:      //Reset Hand
    #####:  898:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  899:	state->hand[currentPlayer][i] = temphand[i];
    #####:  900:	temphand[i] = -1;
        -:  901:      }
        -:  902:      //Reset Hand
        -:  903:      			
    #####:  904:      return 0;
        -:  905:			
        -:  906:    case gardens:
    #####:  907:      return -1;
        -:  908:			
        -:  909:    case mine:
    #####:  910:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  911:
    #####:  912:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  913:	{
    #####:  914:	  return -1;
        -:  915:	}
        -:  916:		
    #####:  917:      if (choice2 > treasure_map || choice2 < curse)
        -:  918:	{
    #####:  919:	  return -1;
        -:  920:	}
        -:  921:
    #####:  922:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  923:	{
    #####:  924:	  return -1;
        -:  925:	}
        -:  926:
    #####:  927:      gainCard(choice2, state, 2, currentPlayer);
        -:  928:
        -:  929:      //discard card from hand
    #####:  930:      discardCard(handPos, currentPlayer, state, 0);
        -:  931:
        -:  932:      //discard trashed card
    #####:  933:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  934:	{
    #####:  935:	  if (state->hand[currentPlayer][i] == j)
        -:  936:	    {
    #####:  937:	      discardCard(i, currentPlayer, state, 0);			
    #####:  938:	      break;
        -:  939:	    }
        -:  940:	}
        -:  941:			
    #####:  942:      return 0;
        -:  943:			
        -:  944:    case remodel:
    #####:  945:		return card_remodel(card, choice1, choice2, choice3, state, handPos, bonus);
        -:  946:	
        -:  947:    case smithy:
        -:  948:      //+3 Cards
    #####:  949:      for (i = 0; i < 3; i++)
        -:  950:	{
    #####:  951:	  drawCard(currentPlayer, state);
        -:  952:	}
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case village:
        -:  959:      //+1 Card
    #####:  960:      drawCard(currentPlayer, state);
        -:  961:			
        -:  962:      //+2 Actions
    #####:  963:      state->numActions = state->numActions + 2;
        -:  964:			
        -:  965:      //discard played card from hand
    #####:  966:      discardCard(handPos, currentPlayer, state, 0);
    #####:  967:      return 0;
        -:  968:		
        -:  969:    case baron:
    #####:  970:      state->numBuys++;//Increase buys by 1!
    #####:  971:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  972:	int p = 0;//Iterator for hand!
    #####:  973:	int card_not_discarded = 1;//Flag for discard set!
    #####:  974:	while(card_not_discarded){
    #####:  975:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -:  976://	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  977:		*bonus += 4;
    #####:  978:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  979:	    state->discardCount[currentPlayer]++;
    #####:  980:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  981:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  982:	    }
    #####:  983:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  984:	    state->handCount[currentPlayer]--;
    #####:  985:	    card_not_discarded = 0;//Exit the loop
        -:  986:	  }
    #####:  987:	  else if (p > state->handCount[currentPlayer]){
    #####:  988:	    if(DEBUG) {
        -:  989:	      printf("No estate cards in your hand, invalid choice\n");
        -:  990:	      printf("Must gain an estate if there are any\n");
        -:  991:	    }
    #####:  992:	    if (supplyCount(estate, state) > 0){
    #####:  993:	      gainCard(estate, state, 0, currentPlayer);
    #####:  994:	      state->supplyCount[estate]--;//Decrement estates
    #####:  995:	      if (supplyCount(estate, state) == 0){
    #####:  996:		isGameOver(state);
        -:  997:	      }
        -:  998:	    }
    #####:  999:	    card_not_discarded = 0;//Exit the loop
        -: 1000:	  }
        -: 1001:			    
        -: 1002:	  else{
    #####: 1003:	    p++;//Next card
        -: 1004:	  }
        -: 1005:	}
        -: 1006:      }
        -: 1007:			    
        -: 1008:      else{
    #####: 1009:	if (supplyCount(estate, state) > 0){
    #####: 1010:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1011:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1012:	  if (supplyCount(estate, state) == 0){
    #####: 1013:	    isGameOver(state);
        -: 1014:	  }
        -: 1015:	}
        -: 1016:      }
        -: 1017:	    
        -: 1018:      
    #####: 1019:      return 0;
        -: 1020:		
        -: 1021:    case great_hall:
    #####: 1022:		return card_great_hall(card, choice1, choice2, choice3, state, handPos, bonus);
        -: 1023:	
        -: 1024:    case minion:
    #####: 1025:		return card_minion(card, choice1, choice2, choice3, state, handPos, bonus);
        -: 1026:	
        -: 1027:    case steward:
     1200: 1028:      if (choice1 == 1)
        -: 1029:	{
        -: 1030:	  //+2 cards
      400: 1031:	  drawCard(currentPlayer, state);
      400: 1032:	  drawCard(currentPlayer, state);
        -: 1033:	}
      800: 1034:      else if (choice1 == 2)
        -: 1035:	{
        -: 1036:	  //+2 coins
        -: 1037://	  state->coins = state->coins + 2;
      400: 1038:	  *bonus += 2;
        -: 1039:	}
        -: 1040:      else
        -: 1041:	{
        -: 1042:	  //trash 2 cards in hand
      400: 1043:	  discardCard(choice2, currentPlayer, state, 1);
      400: 1044:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1045:	}
        -: 1046:			
        -: 1047:      //discard card from hand
     1200: 1048:      discardCard(handPos, currentPlayer, state, 0);
     1200: 1049:      return 0;
        -: 1050:		
        -: 1051:    case tribute:
    #####: 1052:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1053:	if (state->deckCount[nextPlayer] > 0){
    #####: 1054:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	  state->deckCount[nextPlayer]--;
        -: 1056:	}
    #####: 1057:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1058:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1059:	  state->discardCount[nextPlayer]--;
        -: 1060:	}
        -: 1061:	else{
        -: 1062:	  //No Card to Reveal
    #####: 1063:	  if (DEBUG){
        -: 1064:	    printf("No cards to reveal\n");
        -: 1065:	  }
        -: 1066:	}
        -: 1067:      }
        -: 1068:	    
        -: 1069:      else{
    #####: 1070:	if (state->deckCount[nextPlayer] == 0){
    #####: 1071:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1072:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1073:	    state->deckCount[nextPlayer]++;
    #####: 1074:	    state->discard[nextPlayer][i] = -1;
    #####: 1075:	    state->discardCount[nextPlayer]--;
        -: 1076:	  }
        -: 1077:			    
    #####: 1078:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1079:	} 
    #####: 1080:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1081:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1082:	state->deckCount[nextPlayer]--;
    #####: 1083:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
        -: 1086:      }    
        -: 1087:		       
    #####: 1088:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1089:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1090:	state->playedCardCount++;
    #####: 1091:	tributeRevealedCards[1] = -1;
        -: 1092:      }
        -: 1093:
    #####: 1094:      for (i = 0; i <= 2; i ++){
    #####: 1095:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1096://	  state->coins += 2;
    #####: 1097:  	  *bonus += 2;
        -: 1098:	}
        -: 1099:		    
    #####: 1100:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1101:	  drawCard(currentPlayer, state);
    #####: 1102:	  drawCard(currentPlayer, state);
        -: 1103:	}
        -: 1104:	else{//Action Card
    #####: 1105:	  state->numActions = state->numActions + 2;
        -: 1106:	}
        -: 1107:      }
        -: 1108:	    
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case ambassador:
    #####: 1112:      j = 0;		//used to check if player has enough cards to discard
        -: 1113:
    #####: 1114:      if (choice2 > 2 || choice2 < 0)
        -: 1115:	{
    #####: 1116:	  return -1;				
        -: 1117:	}
        -: 1118:
    #####: 1119:      if (choice1 == handPos)
        -: 1120:	{
    #####: 1121:	  return -1;
        -: 1122:	}
        -: 1123:
    #####: 1124:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1125:	{
    #####: 1126:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1127:	    {
    #####: 1128:	      j++;
        -: 1129:	    }
        -: 1130:	}
    #####: 1131:      if (j < choice2)
        -: 1132:	{
    #####: 1133:	  return -1;				
        -: 1134:	}
        -: 1135:
    #####: 1136:      if (DEBUG) 
        -: 1137:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1138:
        -: 1139:      //increase supply count for choosen card by amount being discarded
    #####: 1140:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1141:			
        -: 1142:      //each other player gains a copy of revealed card
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
        -: 1146:	    {
    #####: 1147:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1148:	    }
        -: 1149:	}
        -: 1150:
        -: 1151:      //discard played card from hand
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1153:
        -: 1154:      //trash copies of cards returned to supply
    #####: 1155:      for (j = 0; j < choice2; j++)
        -: 1156:	{
    #####: 1157:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1158:	    {
    #####: 1159:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1160:		{
    #####: 1161:		  discardCard(i, currentPlayer, state, 1);
    #####: 1162:		  break;
        -: 1163:		}
        -: 1164:	    }
        -: 1165:	}			
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:		
        -: 1169:    case cutpurse:
        -: 1170:
    #####: 1171:      updateCoins(currentPlayer, state, 2);
    #####: 1172:      for (i = 0; i < state->numPlayers; i++)
        -: 1173:	{
    #####: 1174:	  if (i != currentPlayer)
        -: 1175:	    {
    #####: 1176:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1177:		{
    #####: 1178:		  if (state->hand[i][j] == copper)
        -: 1179:		    {
    #####: 1180:		      discardCard(j, i, state, 0);
    #####: 1181:		      break;
        -: 1182:		    }
    #####: 1183:		  if (j == state->handCount[i])
        -: 1184:		    {
    #####: 1185:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1186:			{
    #####: 1187:			  if (DEBUG)
        -: 1188:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1189:			}	
    #####: 1190:		      break;
        -: 1191:		    }		
        -: 1192:		}
        -: 1193:					
        -: 1194:	    }
        -: 1195:				
        -: 1196:	}				
        -: 1197:
        -: 1198:      //discard played card from hand
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1200:
    #####: 1201:      return 0;
        -: 1202:
        -: 1203:		
        -: 1204:    case embargo: 
    #####: 1205:		return card_embargo(card, choice1, choice2, choice3, state, handPos, bonus);
        -: 1206:	
        -: 1207:    case outpost:
        -: 1208:      //set outpost flag
    #####: 1209:      state->outpostPlayed++;
        -: 1210:			
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case salvager:
        -: 1216:      //+1 buy
    #####: 1217:      state->numBuys++;
        -: 1218:			
    #####: 1219:      if (choice1)
        -: 1220:	{
        -: 1221:	  //gain coins equal to trashed card
        -: 1222://	  state->coins = state->coins + getCost( handCard(choice1, state) );
    #####: 1223:	  *bonus += getCost( handCard(choice1, state) );
        -: 1224:	  //trash card
    #####: 1225:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1226:	}
        -: 1227:			
        -: 1228:      //discard card
    #####: 1229:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1230:      return 0;
        -: 1231:		
        -: 1232:    case sea_hag:
    #####: 1233:		return card_sea_hag(card, choice1, choice2, choice3, state, handPos, bonus);
        -: 1234:	
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
        -: 1267:}
        -: 1268:
     2000: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
     2000: 1271:  if (handPos >= state->handCount[currentPlayer]){
      402: 1272:	return -1;
        -: 1273:}
        -: 1274:
        -: 1275:  //if card is not trashed, added to Played pile 
     1598: 1276:  if (trashFlag < 1)
        -: 1277:    {
        -: 1278:      //add card to played pile
     1200: 1279:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1200: 1280:      state->playedCardCount++;
        -: 1281:
        -: 1282:	  //add card to discard pil
     1200: 1283:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos]; 
     1200: 1284:      state->discardCount[currentPlayer]++;
        -: 1285:    }
        -: 1286:	
        -: 1287:  //set played card to -1
     1598: 1288:  state->hand[currentPlayer][handPos] = -1;
        -: 1289:	
        -: 1290:  //remove card from player's hand
     1598: 1291:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1292:    {
        -: 1293:      //reduce number of cards in hand
       23: 1294:      state->handCount[currentPlayer]--;
        -: 1295:    }
     1575: 1296:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
    #####: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
        -: 1301:  else 	
        -: 1302:    {
        -: 1303:      //replace discarded card with last card in hand
     1575: 1304:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1305:      //set last card to -1
     1575: 1306:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1307:      //reduce number of cards in hand
     1575: 1308:      state->handCount[currentPlayer]--;
        -: 1309:    }
        -: 1310:	
     1598: 1311:  return 0;
        -: 1312:}
    #####: 1313:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1314:{
        -: 1315:  //Note: supplyPos is enum of choosen card
        -: 1316:	
        -: 1317:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1318:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:	
        -: 1323:  //added card for [whoseTurn] current player:
        -: 1324:  // toFlag = 0 : add to discard
        -: 1325:  // toFlag = 1 : add to deck
        -: 1326:  // toFlag = 2 : add to hand
        -: 1327:
    #####: 1328:  if (toFlag == 1)
        -: 1329:    {
    #####: 1330:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1331:      state->deckCount[player]++;
        -: 1332:    }
    #####: 1333:  else if (toFlag == 2)
        -: 1334:    {
    #####: 1335:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1336:      state->handCount[player]++;
        -: 1337:    }
        -: 1338:  else
        -: 1339:    {
    #####: 1340:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1341:      state->discardCount[player]++;
        -: 1342:    }
        -: 1343:	
        -: 1344:  //decrease number in supply pile
    #####: 1345:  state->supplyCount[supplyPos]--;
        -: 1346:	 
    #####: 1347:  return 0;
        -: 1348:}
        -: 1349:
     1500: 1350:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1351:{
        -: 1352:  int i;
        -: 1353:	
        -: 1354:  //reset coin count
     1500: 1355:  state->coins = 0;
        -: 1356:
        -: 1357:  //add coins for each Treasure card in player's hand
   305605: 1358:  for (i = 0; i < state->handCount[player]; i++)
        -: 1359:    {
   304105: 1360:      if (state->hand[player][i] == copper)
        -: 1361:	{
    12523: 1362:	  state->coins += 1;
        -: 1363:	}
   291582: 1364:      else if (state->hand[player][i] == silver)
        -: 1365:	{
    11746: 1366:	  state->coins += 2;
        -: 1367:	}
   279836: 1368:      else if (state->hand[player][i] == gold)
        -: 1369:	{
    11558: 1370:	  state->coins += 3;
        -: 1371:	}	
        -: 1372:    }	
        -: 1373:
        -: 1374:  //add bonus
     1500: 1375:  state->coins += bonus;
        -: 1376:
     1500: 1377:  return 0;
        -: 1378:}
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
        -: 1382:
